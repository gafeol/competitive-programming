#include <bits/stdc++.h>
using namespace std;
#define fst first
#define snd second
typedef unsigned long long ull;
typedef long long ll;
typedef pair<int, int> pii;
#define pb push_back
#define for_tests(t, tt) int t; scanf("%d", &t); for(int tt = 1; tt <= t; tt++)
#ifndef ONLINE_JUDGE
#define debug(args...) fprintf(stderr,args)
#else
#define debug(args...)
#endif //ONLINE_JUDGE
template<typename T> inline T abs(T t) { return t < 0? -t : t; }
const ll modn = 1000000007;
inline ll mod(ll x) { return x % modn; }

const int MAXN = 41234, MAXX = 1000010;

int n, m, k;
int deg[MAXN], dp[MAXN], nxt[MAXN];

struct seg{
	int x[2], y[2];
	int i;
	seg(int ix, int iy, int ixx, int iyy, int ind){
		x[0] = ix;
		x[1] = ixx;
		y[0] = iy;
		y[1] = iyy;
		i = ind;
	}
	seg(){}
} s[MAXN];

struct cmp{
	bool operator() (const int& ui, const int& oi){
		seg u = s[ui];
		seg o = s[oi];
		double yy;
		for(int a=0;a<2;a++){
			if(u.x[a] >= o.x[0] && o.x[1] >= u.x[a]){
				yy = (double)((o.y[1] - o.y[0])/((double)(o.x[1] - o.x[0])))*(double)(u.x[a] - o.x[0]);
				yy = o.y[0] + yy;
				return ((double)u.y[a] < yy);
			}
		}

		for(int a=0;a<2;a++){
			if(o.x[a] >= u.x[0]  && u.x[1] >= o.x[a]){
				yy = (double)((u.y[1] - u.y[0])/((double)(u.x[1] - u.x[0])))*(double)(o.x[a] - u.x[0]); 
				yy = u.y[0] + yy;
				return (yy < (double)o.y[a]);
			}
		}
		return (u.i < o.i);
	}
};

multiset<int, cmp> q;

map<int, vector<pii> > hor;

void add(seg u){
	for(int t=0;t<2;t++){
		hor[u.x[t]].pb(pii(u.i, (u.x[t] > u.x[1-t])));
	}
}

void sweep(){
	vector<pii> v;
	int ult = 0;
	for(auto& it: hor){
		v = it.snd; 
		int x = it.fst;
		debug("sweep x %d sz %d\n", x, (int)q.size());
		if(q.size() != 0 && (*q.rbegin()) != -1){
			seg top = s[*q.rbegin()];
			debug("no ponto %d top e %d\n", x, top.i);
			dp[top.i] += x - ult;
			ult = x;
		}
		
		for(pii ev: v){
			int t = ev.snd;
			int id = ev.fst;
			if(!t)
				q.insert(id);
		}
		for(pii ev: v){
			int id = ev.fst;
			int t = ev.snd;
			if(id != -1 && s[id].y[t] < s[id].y[(t^1)]){
				int nx = *(--q.lower_bound(id));	
				if(nx != -1){
					nxt[id] = nx;
					deg[nx]++;
				}
			}
		}
		for(pii ev: v){
			int t = ev.snd;
			int id = ev.fst;
			if(t)
				q.erase(q.find(id));
		}
	}
}

int main (){
	for_tests(t, tt){
		add(seg(0, -5, MAXX, -4, -1));
		scanf("%d", &n);
		for(int a=0;a<n;a++){
			int x, xx, y, yy;
			scanf("%d %d %d %d", &x, &y, &xx, &yy);
			s[a] = seg(x, y, xx, yy, a);
			add(s[a]);
		}
		sweep();

		queue<int> ts;
		for(int a=0;a<n;a++){
			if(deg[a] == 0)
				ts.push(a);
		}

		while(!ts.empty()){
			int top = ts.front();
			ts.pop();
			deg[nxt[top]]--;
			if(deg[nxt[top]] == 0)
				ts.push(nxt[top]);
			dp[nxt[top]] += dp[top];
		}
		for(int a=0;a<n;a++){
			printf("%d\n", dp[a]);
		}
	}	
}	
